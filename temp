<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>AI Finance Dashboard</title>
  <script src="https://unpkg.com/lightweight-charts@4.1.1/dist/lightweight-charts.standalone.production.js"></script>
  <style>
    body { margin:0; font-family:sans-serif; }
    #toolbar { padding:8px; border-bottom:1px solid #ddd; display:flex; gap:10px; align-items:center; }
    #chart { height: 480px; }
    button, select, input { padding:4px 6px; }
  </style>
</head>
<body>
  <div id="toolbar">
    Symbol:
    <select id="symbol">
      <option>BTCUSDT</option>
      <option>ETHUSDT</option>
      <option>ADAUSDT</option>
    </select>
    TF:
    <select id="tf">
      <option value="1m">1m</option>
      <option value="5m">5m</option>
    </select>
    <button id="export">Export CSV</button>
    <span id="status" style="margin-left:auto; font-size:12px; color:#666;">Idle</span>
  </div>

  <div id="chart"></div>

  <!-- Panel tin tức -->
  <div id="news" style="height: 280px; overflow:auto; border-top:1px solid #eee; padding:8px 14px;">
    <div style="display:flex; align-items:center; gap:8px;">
      <strong>Tin mới</strong>
      <input id="news-q" placeholder="tìm: btc, eth, rate..." />
      <select id="news-sym">
        <option value="">(all)</option>
        <option>BTC</option><option>ETH</option><option>ADA</option>
      </select>
      <button id="news-load">Load</button>
      <span id="news-status" style="margin-left:auto; font-size:12px; color:#666">Idle</span>
    </div>
    <table id="news-table" style="width:100%; border-collapse:collapse; font-size:13px; margin-top:8px;">
      <thead>
        <tr>
          <th style="text-align:left;">Thời gian</th>
          <th style="text-align:left;">Nguồn</th>     <!-- thêm -->
          <th style="text-align:left;">Tiêu đề</th>
          <th>Sentiment</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- Panel Backtest -->
  <div id="bt" style="border-top:1px solid #eee; padding:10px 14px;">
    <div style="display:flex; gap:8px; align-items:center; flex-wrap:wrap;">
      <strong>Backtest</strong>
      <label>Strategy
        <select id="bt-strategy">
          <option value="ma_cross">MA30 cross MA90</option>
          <option value="ma_cross_sent">MA30 cross MA90 + Sentiment≥0</option>
        </select>
      </label>
      <label>Limit
        <input id="bt-limit" type="number" value="1500" min="200" max="5000" style="width:90px;">
      </label>
      <label>Fee
        <input id="bt-fee" type="number" step="0.0001" value="0.0005" style="width:90px;">
      </label>
      <button id="bt-run">Run</button>
      <span id="bt-status" style="margin-left:auto; font-size:12px; color:#666;">Idle</span>
    </div>

    <div id="bt-summary" style="margin-top:8px; font-size:13px;"></div>

    <div style="margin-top:8px; max-height:220px; overflow:auto;">
      <table id="bt-trades" style="width:100%; border-collapse:collapse; font-size:13px;">
        <thead>
          <tr>
            <th style="text-align:left;">Thời gian</th>
            <th style="text-align:left;">Action</th>
            <th style="text-align:right;">Giá</th>
            <th style="text-align:right;">PnL</th>
            <th style="text-align:right;">Ghi chú</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>


<script>
(function(){
  "use strict";

  // ---- elements
  var symbolSel = document.getElementById('symbol');
  var tfSel = document.getElementById('tf');
  var statusEl = document.getElementById('status');
  var chartEl = document.getElementById('chart');
  var exportBtn = document.getElementById('export');

  // ---- chart
  var chart = LightweightCharts.createChart(chartEl, {
    layout:{textColor:'#111', background:{type:'Solid', color:'#fff'}},
    rightPriceScale:{ borderVisible:false },
    timeScale:{ borderVisible:false }
  });
  var series = chart.addCandlestickSeries();
  var sma30Series = chart.addLineSeries({ lineWidth:2, color:'blue' });
  var sma90Series = chart.addLineSeries({ lineWidth:2, color:'orange' });

  function relayout(){ chart.applyOptions({ width: chartEl.clientWidth, height: chartEl.clientHeight }); }
  addEventListener('resize', relayout); relayout();

  // ---- state
  var ws = null;
  var candles = [];

  function setStatus(s){ statusEl.textContent = s; }

  // ---- helpers
  function calcSMA(data, period){
    var out = [];
    for (var i=0;i<data.length;i++){
      if (i < period-1) continue;
      var sum = 0;
      for (var j=0;j<period;j++) sum += data[i-j].close;
      out.push({ time: data[i].time, value: sum/period });
    }
    return out;
  }
  function upsertCandle(c){
    if (candles.length && candles[candles.length-1].time === c.time) {
      candles[candles.length-1] = c;
    } else {
      candles.push(c);
      if (candles.length > 5000) candles.shift();
    }
  }

  // ---- API (history from backend)
  async function myApiKlines(symbol, interval, limit){
    if (limit === undefined) limit = 1000;
    const url = `http://localhost:8000/candles?symbol=${symbol}&tf=${interval}&limit=${limit}`;
    const arr = await fetch(url).then(r=>r.json());
    return arr.map(k => ({ time:k.ts, open:k.o, high:k.h, low:k.l, close:k.c }));
  }

  // ---- WebSocket Binance (temporary realtime)
  function connectWS(symbol, interval){
    const stream = `${symbol.toLowerCase()}@kline_${interval}`;
    const url = `wss://stream.binance.com:9443/ws/${stream}`;
    if (ws) { try{ ws.close(1000,'reconnect'); }catch(_){} }
    ws = new WebSocket(url);

    ws.onopen  = () => setStatus('WS connected');
    ws.onclose = () => setStatus('WS disconnected');
    ws.onerror = (e) => { console.error('WS error', e); setStatus('WS error'); };

    ws.onmessage = (ev) => {
      const data = JSON.parse(ev.data);
      if (!data.k) return;
      const k = data.k;
      const c = { time: Math.floor(k.t/1000), open:+k.o, high:+k.h, low:+k.l, close:+k.c };
      series.update(c);
      upsertCandle(c);
      var s30 = calcSMA(candles, 30).slice(-1)[0];
      var s90 = calcSMA(candles, 90).slice(-1)[0];
      if (s30) sma30Series.update(s30);
      if (s90) sma90Series.update(s90);
    };
  }

  // ---- export CSV
  function toCSV(rows){
    const header = ["time","open","high","low","close","sma30","sma90"];
    const s30 = calcSMA(candles, 30);
    const s90 = calcSMA(candles, 90);
    const s30Map = new Map(s30.map(x => [x.time, x.value]));
    const s90Map = new Map(s90.map(x => [x.time, x.value]));
    const lines = [header.join(",")];
    for (const c of rows) {
      const t = c.time;
      lines.push([t, c.open, c.high, c.low, c.close, s30Map.get(t) ?? "", s90Map.get(t) ?? ""].join(","));
    }
    return lines.join("\n");
  }
  function download(name, text){
    const blob = new Blob([text], {type:"text/csv;charset=utf-8"});
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = name; a.click(); URL.revokeObjectURL(url);
  }
  exportBtn.addEventListener('click', ()=>{
    if (!candles.length) { alert("Chưa có dữ liệu để export."); return; }
    const sym = symbolSel.value, tf = tfSel.value;
    download(`${sym}_${tf}.csv`, toCSV(candles));
  });

  // ---- load
  async function load(symbol, interval){
    setStatus('Loading history…');
    if (ws) { try{ ws.close(1000,'reload'); }catch(_){} ws = null; }
    candles = [];
    series.setData([]); sma30Series.setData([]); sma90Series.setData([]);
    const hist = await myApiKlines(symbol, interval, 1000);
    candles = hist.slice();
    series.setData(candles);
    sma30Series.setData(calcSMA(candles, 30));
    sma90Series.setData(calcSMA(candles, 90));
    setStatus('History loaded. Connecting WS…');
    connectWS(symbol, interval);
  }

  // ---- events
  symbolSel.addEventListener('change', ()=> load(symbolSel.value, tfSel.value));
  tfSel.addEventListener('change',     ()=> load(symbolSel.value, tfSel.value));
  addEventListener('beforeunload', ()=> { if (ws) try{ws.close()}catch(_){} });

  // ---- init
  load(symbolSel.value, tfSel.value);
})();

// ========== NEWS ==========
(async function(){
  const newsStatus = document.getElementById('news-status');
  const newsQ = document.getElementById('news-q');
  const newsSym = document.getElementById('news-sym');
  const newsBtn = document.getElementById('news-load');
  const newsBody = document.querySelector('#news-table tbody');

  function setNewsStatus(s){ newsStatus.textContent = s; }
  function tsToLocal(ts){ return new Date(ts*1000).toLocaleString(); }
  function pill(label){
    const color = label==='positive' ? '#16a34a' : label==='negative' ? '#dc2626' : '#6b7280';
    return `<span style="color:${color}; font-weight:600;">${label||'neutral'}</span>`;
  }

  function prettySource(src) {
    if (!src) return "";
    const map = {
      "www.coindesk.com": "CoinDesk",
      "cointelegraph.com": "Cointelegraph",
      "cryptoslate.com": "CryptoSlate",
      "cryptonews.com": "CryptoNews",
      "cryptopotato.com": "CryptoPotato",
      "bitcoinmagazine.com": "Bitcoin Magazine",
      "vnexpress.net": "VnExpress",
      "tuoitre.vn": "Tuổi Trẻ",
      "blogtienao.com": "Blog Tiền Ảo",
      "tapchibitcoin.io": "Tạp chí Bitcoin",
      "coin68.com": "Coin68",
      "marginatm.com": "MarginATM"
    };
    const key = src.toLowerCase();
    return map[key] || src; // nếu không map thì hiển thị domain gốc
  }

  async function loadNews(){
    setNewsStatus('Loading…');
    const q = newsQ.value.trim();
    const sym = newsSym.value.trim();
    const params = new URLSearchParams();
    params.set('limit','30');
    if (q) params.set('q', q);
    if (sym) params.set('symbol', sym);
    const url = `http://localhost:8100/news?${params.toString()}`;
    const arr = await fetch(url).then(r=>r.json());
    newsBody.innerHTML = arr.map(it => {
      return `<tr>
        <td style="padding:6px 8px; border-top:1px solid #eee;">${it.published_at ? tsToLocal(it.published_at) : ''}</td>
        <td style="padding:6px 8px; border-top:1px solid #eee;">${prettySource(it.source_name)}</td>
        <td style="padding:6px 8px; border-top:1px solid #eee;">
          <a href="${it.url}" target="_blank" rel="noreferrer">${it.title}</a><br/>
          <span style="color:#666">${(it.summary || '').slice(0,160)}</span>
        </td>
        <td style="padding:6px 8px; border-top:1px solid #eee; text-align:center;">${pill(it.sentiment_label)}</td>
      </tr>`;
    }).join('');
    setNewsStatus(`Loaded ${arr.length} items`);
  }

  newsBtn.addEventListener('click', loadNews);
  loadNews();
})();

/* ========== BACKTEST CODE ========== */
(function(){
  const BT_API = "http://localhost:8300";
  const symSel = document.getElementById('symbol');
  const tfSel  = document.getElementById('tf');

  const runBtn = document.getElementById('bt-run');
  const stratEl= document.getElementById('bt-strategy');
  const limitEl= document.getElementById('bt-limit');
  const feeEl  = document.getElementById('bt-fee');
  const status = document.getElementById('bt-status');
  const sumEl  = document.getElementById('bt-summary');
  const tbody  = document.querySelector('#bt-trades tbody');

  function tsToLocal(ts){ return new Date(ts*1000).toLocaleString(); }
  function setStatus(s){ status.textContent = s; }

  function fmtPct(x){
    if (x === undefined || x === null || isNaN(x)) return '';
    return (x*100).toFixed(2) + '%';
  }
  function fmtNum(x, d=2){
    if (x === undefined || x === null || isNaN(x)) return '';
    return Number(x).toFixed(d);
  }

  function renderSummary(s){
    sumEl.innerHTML = `
      <div style="display:flex; gap:18px; flex-wrap:wrap;">
        <div>Symbol: <b>${s.symbol}</b> | TF: <b>${s.tf}</b> | Rule: <b>${s.rule}</b></div>
        <div>Số lệnh: <b>${s.n_trades}</b> | Win: <b>${s.win}</b> | Loss: <b>${s.loss}</b> | Winrate: <b>${fmtPct(s.winrate)}</b></div>
        <div>Total Return: <b>${fmtPct(s.total_return)}</b> | Equity End: <b>${fmtNum(s.equity_end,4)}</b> | Sharpe-like: <b>${fmtNum(s.sharpe_like,3)}</b></div>
      </div>
    `;
  }

  function renderTrades(list){
    tbody.innerHTML = list.map(it=>{
      const note = (it.sent_mean!==undefined) ? `sent_mean=${fmtNum(it.sent_mean,3)}` : '';
      const pnl  = (it.pnl!==undefined) ? fmtPct(it.pnl) : '';
      const color= (it.pnl>0) ? '#16a34a' : (it.pnl<0 ? '#dc2626' : '#555');
      return `<tr>
        <td style="padding:6px 8px; border-top:1px solid #eee;">${tsToLocal(it.time)}</td>
        <td style="padding:6px 8px; border-top:1px solid #eee;">${it.action}</td>
        <td style="padding:6px 8px; border-top:1px solid #eee; text-align:right;">${fmtNum(it.price)}</td>
        <td style="padding:6px 8px; border-top:1px solid #eee; text-align:right; color:${pnl?color:'#555'};">${pnl}</td>
        <td style="padding:6px 8px; border-top:1px solid #eee; text-align:right;">${note}</td>
      </tr>`;
    }).join('');
  }

  async function runBacktest(){
    setStatus('Running…');
    const symbol = symSel.value;
    const tf     = tfSel.value;
    const rule   = stratEl.value;
    const limit  = Math.max(200, Math.min(5000, Number(limitEl.value)||1500));
    const fee    = Number(feeEl.value)||0.0005;

    const params = new URLSearchParams({ symbol, tf, rule, limit: String(limit), fee: String(fee) });
    const url = `${BT_API}/backtest?${params.toString()}`;
    try{
      const data = await fetch(url).then(r=>r.json());
      if (data.error){
        setStatus('Error: '+data.error);
        sumEl.innerHTML = ''; tbody.innerHTML='';
        return;
      }
      renderSummary(data.summary);
      renderTrades(data.trades);
      setStatus('Done');
    }catch(e){
      console.error(e);
      setStatus('Failed');
    }
  }

  // nút Run
  runBtn.addEventListener('click', runBacktest);
  // tự chạy lại khi đổi symbol/tf để đồng bộ với chart
  symSel.addEventListener('change', runBacktest);
  tfSel .addEventListener('change', runBacktest);

  // chạy lần đầu
  runBacktest();
})();

</script>
</body>
</html>
